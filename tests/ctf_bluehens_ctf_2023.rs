use std::str::FromStr;

use rsacracker::{integer_to_string, run_attacks, Parameters};
use rug::Integer;

#[test]
fn bluehens_ctf_2023_rsa_school_1st_grade() {
    // BlueHens CTF 2023 / RSA School 1st Grade
    // https://ctftime.org/task/26924

    let params = Parameters {
        p: Some(Integer::from_str("7009789528005665925389589645247771843738610365138497450285434114825324963561464592190523618045678504210355855286077875965585945664408796837853566415684077").unwrap()),
        n: Some(Integer::from_str("73061872549912499570368059392056653520123131891860048946474996807859190776947568485365189613739847632132597352816568237525325622321891749472819811314630053648031678826291232292672975634200777457699671848298242827252269004463672931479153540235625891818449660268924228002522141737330313259535617652381070426543").unwrap()),
        c: Some(Integer::from_str("8099012654842320180974620472267007973324910863630262955526926760464542904631823196320598910081443799605804614201671967967929893760527002416689993003801924422327762868245291561376910828637706061326005113536536357969201659290874169593264337355365186414719656091960977568710047843815328537885731546232759484717").unwrap()),
        ..Default::default()
    };

    let solution = run_attacks(&params).unwrap();
    assert!(solution.pk.is_some());
    assert_eq!(
        integer_to_string(&solution.m.unwrap()).unwrap().trim(),
        "UDCTF{y3a_b0i_b4by_RSA!}"
    );
}
// TODO: No factorization attack found: official solution is to use facordb
// #[test]
// fn bluehens_ctf_2023_rsa_school_2nd_grade() {
//     // BlueHens CTF 2023 / RSA School 2nd Grade
//     // https://ctftime.org/task/26925

//     let params = Parameters {
//         n: Some(Integer::from_str("166045890368446099470756111654736772731460671003059151938763854196360081247044441029824134260263654537").unwrap()),
//         c: Some(Integer::from_str("141927379986409920845194703499941262988061316706433242289353776802375074525295688904215113445883589653").unwrap()),
//         ..Default::default()
//     };

//     let solution = run_attacks(&params).unwrap();
//     assert!(solution.pk.is_some());
//     assert_eq!(
//         integer_to_string(&solution.m.unwrap()).unwrap().trim(),
//         "UDCTF{pr1m3_f4ct0r_the1f!}"
//     );
// }

// TODO: BlueHens CTF 2023 / RSA School 3rd Grade
// https://ctftime.org/task/26927

// TODO: BlueHens CTF 2023 / RSA School 4th Grade
// https://ctftime.org/task/26930

#[test]
fn bluehens_ctf_2023_rsa_school_5th_grade() {
    // BlueHens CTF 2023 / RSA School 5th Grade
    // https://ctftime.org/task/26931

    let params = Parameters {
        n: Some(Integer::from_str("19071553514906413228005623880868413172589438760530345745552708038769515697875361787053550188848159274987925247955174211167277615747329764460652862539122337714189780686582390326881171096308885109154336023212767779863472386169665627283720649094479648444588259600544834704143105214853522264311830387911281263299214052701109619722665736303738110883886917231219876629681611411323913511707032906816948757362133848480976586951323342448069343747851239877539085111823678094070778241732994351072251605007909682674187665596109353312252881532685577047967768366217935948525094732268620589271065304471832191222326947334404799847563").unwrap()),
        c: Some(Integer::from_str("270903177796878498388304376598565799121492331770875203351555502784804760985678087802688162298096409297508110557051747972509915173895153270896299567072600809265143377905255294763705268648639628042173298874918538565864469546919085252896111245679898930789").unwrap()),
        e: 3.into(),
        ..Default::default()
    };

    let solution = run_attacks(&params).unwrap();
    assert_eq!(
        integer_to_string(&solution.m.unwrap()).unwrap().trim(),
        "UDCTF{0k_m4yb3_d0nt_u5e_e_3qu4l5_3}"
    );
}

// TODO: BlueHens CTF 2023 / RSA School 6th Grade
// https://ctftime.org/task/26933

#[test]
fn bluehens_ctf_2023_rsa_school_7th_grade() {
    // BlueHens CTF 2023 / RSA School 7th Grade
    // https://ctftime.org/task/26935

    let params = Parameters {
        n: Some(Integer::from_str("17740803753336460891508014077951088945415214329359164945595622460861617151883658129377771074141448545977293824812472806768754107334272113784618671425945265453677763300584120796664192793654787317526905676618168560287204392207536711238413377822113265783504873957094131330620182217422910507867161033695120195691266283498385072573721376398480018719760538723050237163598524153522595496137288270407836138586188296538117138982579560625325815068701431157466298638302885600982291990551448117534677697122276691651611734934147801954625280213769902451417946572231015611006746186167211313556716518863585799128114202130873384852581").unwrap()),
        c: Some(Integer::from_str("7617664236008252568996899627946125782926068188323112773389474654757630578865481085502759186904920518615173703165984894164411436709177950136929724052191922739861682189280802963747906815275683543148623167088950096943169566195634558711652670745197446307315888349532981492405588457559228674864147994684328968321710022127803384848143475788457274558988285904875669797926919759123645348144531804252200718312650929926931919262408975771593313266992606751663814830129337536342634243623652919127335934704778878412649409415730419077839365246227059700689395639431013008985996793686430486195007712091309878718060405038405039494286").unwrap()),
        ..Default::default()
    };

    let solution = run_attacks(&params).unwrap();
    assert!(solution.pk.is_some());
    assert_eq!(
        integer_to_string(&solution.m.unwrap()).unwrap().trim(),
        "UDCTF{F3rma7_c4n_sur3_fac70r!}"
    );
}

#[test]
fn bluehens_ctf_2023_rsa_school_8th_grade() {
    // BlueHens CTF 2023 / RSA School 8th Grade
    // https://ctftime.org/task/26936

    let params = Parameters {
        n: Some(Integer::from_str("150459385706485253914441877113384979120500190162060302508541299821944089329499694790524295291567135320851306118878915105907451588623958757693847782920309145753994837129247899050065917279292484317798035721308006529470560777407483024961882645653400385816416526996027114542480513056100444908809723540145733606413").unwrap()),
        c: Some(Integer::from_str("2307423154990120835718508986514267143655326830191633946685219656220840494132925634069678170936781595742873539412034460586639622885239343246714559828497111273868089182257159904851948098861145910137615097694560608874412798124055642460363270612990137075678106724613406247492210136960473648165963598137216228495").unwrap()),
        ..Default::default()
    };

    let solution = run_attacks(&params).unwrap();
    assert!(solution.pk.is_some());
    assert_eq!(
        integer_to_string(&solution.m.unwrap()).unwrap().trim(),
        "UDCTF{4n_RSA_5ch0ol_gr4dua73!!}"
    );
}
