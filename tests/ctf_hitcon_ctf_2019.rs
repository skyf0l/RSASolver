use std::str::FromStr;

use rsacracker::{integer_to_string, run_attacks, Parameters};
use rug::Integer;

#[test]
fn hitcon_ctf_2019_quals_lost_modulus_again() {
    // From HITCON CTF 2019 Quals / Lost Modulus Again
    // https://ctftime.org/task/9427

    let params = Parameters {
        e: 1048583.into(),
        c : Some(Integer::from_str("6315517144108346181816723099897023675574911374735398936591833706590364258184564710827234427731055048559822607765825888615252018165526396090041236515481884097316115657845863616027191241546872931338194871262588098949428397377758354022592306745947669728354322461011070818767686781572984901259034033895184947744496886943392083163678583781999851929812332715335746883110069495497948728241194518127509291959160766882315610259762352662845983222877441386838765184047248466927144181212035420321292287216414973587365695429489044345623525454703093721722072717560946535366845119502057231317372617085049803374310078177219696035587").unwrap()),
        d : Some(Integer::from_str("20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927").unwrap()),
        qinv : Some(Integer::from_str("138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331").unwrap()),
        pinv : Some(Integer::from_str("22886390627173202444468626406642274959028635116543626995297684671305848436910064602418012808595951325519844918478912090039470530649857775854959462500919029371215000179065185673136642143061689849338228110909931445119687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743").unwrap()),
        ..Default::default()

    };

    let solution = run_attacks(&params).unwrap();
    assert!(solution.pk.is_some());
    assert_eq!(
        integer_to_string(&solution.m.unwrap()).unwrap().trim(),
        "hitcon{1t_is_50_easy_t0_find_th3_modulus_back@@!!@!@!@@!}"
    );
}
#[test]
fn hitcon_ctf_2019_quals_lost_modulus_again_with_phi() {
    // Alternative of HITCON CTF 2019 Quals / Lost Modulus Again with given phi instead of d
    // https://ctftime.org/task/9427

    let params = Parameters {
        e: 1048583.into(),
        c : Some(Integer::from_str("6315517144108346181816723099897023675574911374735398936591833706590364258184564710827234427731055048559822607765825888615252018165526396090041236515481884097316115657845863616027191241546872931338194871262588098949428397377758354022592306745947669728354322461011070818767686781572984901259034033895184947744496886943392083163678583781999851929812332715335746883110069495497948728241194518127509291959160766882315610259762352662845983222877441386838765184047248466927144181212035420321292287216414973587365695429489044345623525454703093721722072717560946535366845119502057231317372617085049803374310078177219696035587").unwrap()),
        phi : Some(Integer::from_str("22509077260984027608263845908083202879597081619164800783060781115945741547031252889863077300004310236160814653393991988068104999928735140821504649764471313283345921984799288521496479399032837319974588038186917872597078510975400908137738190304700710900604891709265153418588830065918981914371070605822998222526936764035473024951172438654405051015158373989943636215751206002298354662255322404681649160859586893385153685796114347024559211776931935054744445492193990127160520676232531227390204623950157430966169435920800794748331292066769479560454753704770229274680560878024797177827265072368595931697411659251440631501728").unwrap()),
        qinv : Some(Integer::from_str("138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331").unwrap()),
        pinv : Some(Integer::from_str("22886390627173202444468626406642274959028635116543626995297684671305848436910064602418012808595951325519844918478912090039470530649857775854959462500919029371215000179065185673136642143061689849338228110909931445119687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743").unwrap()),
        ..Default::default()

    };

    let solution = run_attacks(&params).unwrap();
    assert!(solution.pk.is_some());
    assert_eq!(
        integer_to_string(&solution.m.unwrap()).unwrap().trim(),
        "hitcon{1t_is_50_easy_t0_find_th3_modulus_back@@!!@!@!@@!}"
    );
}
